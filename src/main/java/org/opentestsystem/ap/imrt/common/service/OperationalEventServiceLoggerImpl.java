package org.opentestsystem.ap.imrt.common.service;

import org.slf4j.Logger;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Implementation of OperationalEventService that logs the events
 */
@Service
public class OperationalEventServiceLoggerImpl implements OperationalEventService {
    /**
     * Service related events, requiring action by Operations
     */
    private enum ServiceEventType {
        IMRT_WARNING, IMRT_ERROR, IMRT_INFO, IMRT_DEBUG, IMRT_PERFOMRANCE
    }

    @Override
    public void itemEvent(Logger logger, ItemEventType type, Integer key, Integer itemId, Integer projectId) {
        StringBuilder builder = new StringBuilder();
        List<Object> args = new ArrayList<>(3);
        builder.append("ITEM EVENT type: {}");
        args.add(type);
        append(args, builder, " key: {}", key);
        append(args, builder, " itemId: {}", itemId);
        append(args, builder, " projectId: {}", projectId);
        logger.info(builder.toString(), args.toArray());
    }

    @Override
    public void itemMonitoredEvent(Logger logger, int projectId) {
        itemEvent(logger, OperationalEventService.ItemEventType.ITEM_MONITORED, null, null, projectId);
    }

    @Override
    public void itemCreatedEvent(Logger logger, int key, Integer itemId, int projectId) {
        itemEvent(logger, OperationalEventService.ItemEventType.ITEM_CREATED, key, itemId, projectId);
    }

    @Override
    public void itemUpdatedEvent(Logger logger, int key, Integer itemId, int projectId) {
        itemEvent(logger, OperationalEventService.ItemEventType.ITEM_UPDATED, key, itemId, projectId);
    }

    @Override
    public void itemDeletedEvent(Logger logger, int key, Integer id, int projectId) {
        itemEvent(logger, OperationalEventService.ItemEventType.ITEM_DELETED, key, id, projectId);
    }

    @Override
    public void error(Logger logger, Throwable e, String format, Object... args) {
        serviceEvent(logger, ServiceEventType.IMRT_ERROR, e, format, args);
    }

    @Override
    public void warn(Logger logger, Throwable e, String format, Object... args) {
        serviceEvent(logger, ServiceEventType.IMRT_WARNING, e, format, args);
    }

    @Override
    public void info(Logger logger, String format, Object... args) {
        serviceEvent(logger, ServiceEventType.IMRT_INFO, null, format, args);
    }

    @Override
    public void debug(final Logger logger, final String format, final Object... args) {
        serviceEvent(logger, ServiceEventType.IMRT_DEBUG, null, format, args);
    }


    @Override
    public void performannce(final Logger logger, final String format, final Object... args) {
        serviceEvent(logger, ServiceEventType.IMRT_PERFOMRANCE, null, format, args);
    }

    /**
     * Appends a message to a string builder and corresponding value to an argument list,
     * only if the value is non-null
     *
     * @param args    Existing list of arguments to append to
     * @param builder Existing string builder to append to
     * @param message Message to append, if value is non-null
     * @param value   Value to append, if it is non-null
     */
    private void append(List<Object> args, StringBuilder builder, String message, Object value) {
        if (value != null) {
            builder.append(message);
            args.add(value);
        }
    }

    private void serviceEvent(Logger logger, ServiceEventType type, Throwable e, String format, Object... args) {
        String output = type + ": " + format;
        List<Object> allArgs = new ArrayList<>(Arrays.asList(args));

        if (e != null) {
            allArgs.add(e);
        }

        switch (type) {
            case IMRT_ERROR:
                logger.error(output, allArgs.toArray());
                break;
            case IMRT_WARNING:
                logger.warn(output, allArgs.toArray());
                break;
            case IMRT_INFO:
            case IMRT_PERFOMRANCE:
                logger.info(output, allArgs.toArray());
                break;
            case IMRT_DEBUG:
                logger.debug(output, allArgs.toArray());
                break;
            default:
                throw new IllegalArgumentException("Invalid ServiceEventType sent " + type);
        }
    }
}
