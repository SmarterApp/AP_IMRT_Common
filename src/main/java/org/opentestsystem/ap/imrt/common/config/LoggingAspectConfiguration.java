package org.opentestsystem.ap.imrt.common.config;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

/**
 * Create an {@link org.aspectj.lang.annotation.Aspect} that will record the following in a log file at INFO level:
 * <p>
 * -- The method signature (the name of the {@link org.springframework.stereotype.Controller}'s class and the method called)
 * -- The arguments passed into the method
 * -- How long the method call took in milliseconds
 * <p>
 * This aspect will bind to any classes that have the {@link org.springframework.web.bind.annotation.RestController}
 * annotation.  All methods in the annotated class will be intercepted and logged.
 */
@Aspect
@Configuration
public class LoggingAspectConfiguration {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    private final OperationalEventService operationalEventService;

    @Autowired
    public LoggingAspectConfiguration(final OperationalEventService operationalEventService) {
        this.operationalEventService = operationalEventService;
    }

    /**
     * Define a point cut for any class that is annotated with a {@link org.springframework.web.bind.annotation.RestController}
     *  * annotation.
     */
    @Pointcut("within(@org.springframework.web.bind.annotation.RestController * )")
    public void springRestControllers() {
    }

    /**
     * Define a point cut for any method in the annotated class
     */
    @Pointcut("execution(* *.*(..))")
    protected void allMethods() {
    }

    /**
     * Log the method in progress, capturing the method name, the input arguments and how long the method took to get
     * the result.
     *
     * @param joinPoint The {@link org.aspectj.lang.ProceedingJoinPoint} representing the method call that is being
     *                  recorded.
     * @return The result of the method call
     * @throws java.lang.Throwable whenever an exception is encountered during the method call
     */
    @Around("springRestControllers() && allMethods()")
    public Object logAround(final ProceedingJoinPoint joinPoint) throws Throwable {
        final long startTimeInMs = System.currentTimeMillis();

        final Object result = joinPoint.proceed();

        operationalEventService.serviceInfo(logger,
                "Method signature: {}, input args: {}, elapsed time (in ms): {}",
                joinPoint.getSignature().toShortString(),
                joinPoint.getArgs(),
                System.currentTimeMillis() - startTimeInMs);

        return result;
    }
}
