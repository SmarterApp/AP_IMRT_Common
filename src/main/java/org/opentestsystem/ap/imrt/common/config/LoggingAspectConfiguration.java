package org.opentestsystem.ap.imrt.common.config;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

@Aspect
@Configuration
public class LoggingAspectConfiguration {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    private final OperationalEventService operationalEventService;

    @Autowired
    public LoggingAspectConfiguration(final OperationalEventService operationalEventService) {
        this.operationalEventService = operationalEventService;
    }

    @Pointcut("within(@org.springframework.web.bind.annotation.RestController * )")
    public void springRestControllers() {
    }

    @Pointcut("execution(* *.*(..))")
    protected void allMethods() {
    }

    @Around("springRestControllers() && allMethods()")
    public Object logAround(final ProceedingJoinPoint joinPoint) throws Throwable {
        final long startTimeInMs = System.currentTimeMillis();
        final Object result = joinPoint.proceed();

        operationalEventService.serviceInfo(logger,
                "Method signature: {}, args: {}, elapsed time (in ms): {}",
                joinPoint.getSignature().toShortString(),
                joinPoint.getArgs(),
                System.currentTimeMillis() - startTimeInMs);

        return result;
    }
}
