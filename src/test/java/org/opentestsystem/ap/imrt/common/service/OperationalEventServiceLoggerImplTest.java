package org.opentestsystem.ap.imrt.common.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class OperationalEventServiceLoggerImplTest {
    private static final Logger logger = LoggerFactory.getLogger(OperationalEventServiceLoggerImplTest.class);
    private OperationalEventService operationalEventService = new OperationalEventServiceLoggerImpl();

    @Mock
    private Logger mockLogger;

    /**
     * This is just a manual test that requires visual inspection of the output to verify
     */
    @Test
    public void testApis() {
        operationalEventService.itemCreatedEvent(logger, 1, 123, 3);
        operationalEventService.itemMonitoredEvent(logger, 55);
        operationalEventService.itemUpdatedEvent(logger, 4, 123, 6);
        operationalEventService.itemDeletedEvent(logger, 4, 123, 6);

        operationalEventService.error(logger, null, "Test format {} value {}", 1, 2);
        operationalEventService.error(logger, new RuntimeException(), "test format {}", 3);

        operationalEventService.warn(logger, null, "Test format {} {}", 1, 2);
        operationalEventService.warn(logger, new RuntimeException(), "test format {}", 3);

        operationalEventService.debug(logger, "info test format{} {}", "foo", "bar");
        operationalEventService.performannce(logger, "info test format{} {}", "foo", "bar");
        operationalEventService.info(logger, "info test format{} {}", "foo", "bar");
    }

    @Test
    public void shouldDebugLog() {
        operationalEventService.debug(mockLogger, "info test format{} {}", "foo", "bar");

        ArgumentCaptor<String[]> captor = ArgumentCaptor.forClass(String[].class);
        verify(mockLogger).debug(isA(String.class), (Object[]) captor.capture());
        List<String[]> values = captor.getAllValues();
        assertThat(values.stream().map((Function<Object, String>) Object::toString).collect(Collectors.toList())).containsExactly("foo", "bar");
    }
}
