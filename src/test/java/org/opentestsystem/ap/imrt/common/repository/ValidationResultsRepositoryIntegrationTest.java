package org.opentestsystem.ap.imrt.common.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.imrt.common.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ValidationResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class ValidationResultsRepositoryIntegrationTest {
    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Autowired
    private ValidationResultsRepository validationResultsRepository;

    @Test
    public void shouldSaveValidationResult() {
        ImrtItem item = new ImrtItemBuilder().build();

        imrtItemRepository.save(item);

        ValidationResult result = new ValidationResult();

        result.setCategory("Cat");
        result.setDetail("detail");
        result.setItem(item);
        result.setSeverity("severe");
        result.setValidationItemId(String.valueOf(item.getId()));
        result.setValidationItemType(item.getItemType());
        result.setUpdatedBy("updatedBy");
        result.setMessage("message");

        validationResultsRepository.save(result);

        ValidationResult savedResult = validationResultsRepository.findOne(result.getKey());

        assertThat(savedResult).isEqualToComparingFieldByField(result);
    }

    @Test
    public void shouldFindAllValidationResultsByItem() {
        ImrtItem item = new ImrtItemBuilder().build();

        imrtItemRepository.save(item);

        ValidationResult result = new ValidationResult();

        result.setCategory("Cat");
        result.setDetail("detail");
        result.setItem(item);
        result.setSeverity("severe");
        result.setValidationItemId(String.valueOf(item.getId()));
        result.setValidationItemType(item.getItemType());
        result.setUpdatedBy("updatedBy");
        result.setMessage("message");

        validationResultsRepository.save(result);

        Collection<ValidationResult> results = validationResultsRepository.findAllByItem(item);

        assertThat(results).hasSize(1);
        assertThat(results.iterator().next()).isEqualToComparingFieldByField(result);
    }

    @Test
    public void shouldDeleteAllByItem() {
        ImrtItem item = new ImrtItemBuilder().build();

        imrtItemRepository.save(item);

        ValidationResult result = new ValidationResult();

        result.setCategory("Cat");
        result.setDetail("detail");
        result.setItem(item);
        result.setSeverity("severe");
        result.setValidationItemId(String.valueOf(item.getId()));
        result.setValidationItemType(item.getItemType());
        result.setUpdatedBy("updatedBy");
        result.setMessage("message");

        validationResultsRepository.save(result);

        Collection<ValidationResult> results = validationResultsRepository.findAllByItem(item);

        assertThat(results).hasSize(1);
        assertThat(results.iterator().next()).isEqualToComparingFieldByField(result);

        validationResultsRepository.deleteAllByItem(item);

        assertThat(validationResultsRepository.findAllByItem(item)).isEmpty();
    }
}
