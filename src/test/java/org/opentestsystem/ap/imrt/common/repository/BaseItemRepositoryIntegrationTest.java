package org.opentestsystem.ap.imrt.common.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.imrt.common.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.common.builder.ValidationResultBuilder;
import org.opentestsystem.ap.imrt.common.model.Attachment;
import org.opentestsystem.ap.imrt.common.model.AttachmentFileTypes;
import org.opentestsystem.ap.imrt.common.model.AttachmentKey;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.Form;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ValidationResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class BaseItemRepositoryIntegrationTest {
    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Autowired
    private BaseItemRepository baseItemRepository;

    @Test
    public void shouldFindById() {
        ImrtItem imrtItem = ImrtItemBuilder.builder()
                .withAssociatedStimulusId(123)
                .build();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(baseItemRepository.findById(imrtItem.getId()));
    }

    @Test
    public void shouldSaveAnItemThatHasAttachments() {
        final ImrtItem imrtItem = ImrtItemBuilder.builder()
                .withAslRequired("yes")
                .withAslProvided("yes")
                .withBrailleRequired("yes")
                .withBrailleProvided("yes")
                .withCcRequired("yes")
                .withCcProvided("yes")
                .build();

        final Attachment aslAttachment = new Attachment(new AttachmentKey(imrtItem, "asl-filename", AttachmentFileTypes.ASL),
                Instant.now(),
                "me");
        final Attachment brailleAttachment = new Attachment(new AttachmentKey(imrtItem, "braille-filename", AttachmentFileTypes.BRAILLE),
                Instant.now(),
                "me");
        brailleAttachment.setUpdatedBy("me");
        final Attachment ccAttachment = new Attachment(new AttachmentKey(imrtItem, "cc-filename", AttachmentFileTypes.CC),
                Instant.now(),
                "me");
        ccAttachment.setUpdatedBy("me");

        imrtItem.setAttachments(Arrays.asList(aslAttachment, brailleAttachment, ccAttachment));

        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));

        final BaseItem savedItem = baseItemRepository.findById(imrtItem.getId());

        assertThat(savedItem.getAttachments()).hasSize(3);
        assertThat(savedItem.getAttachments()).contains(aslAttachment, brailleAttachment, ccAttachment);
    }

    @Test
    public void shouldSaveAnItemWithANullSightTtsProvidedField() {
        final ImrtItem imrtItem = ImrtItemBuilder.builder()
                .withSightTtsProvided(null)
                .withVisualTtsProvided(null)
                .build();

        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(baseItemRepository.findById(imrtItem.getId()));
    }

    @Test
    public void shouldHandleForms() {

        final ImrtItem imrtItem = ImrtItemBuilder.builder()
                .build();

        Form form = new Form();
        form.setFormId("SomeId");
        form.setUpdatedBy("updatedBy");
        form.setItem(imrtItem);

        imrtItem.setForms(Collections.singletonList(form));

        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));

        final BaseItem savedItem = baseItemRepository.findById(imrtItem.getId());

        assertThat(savedItem.getForms()).hasSize(1);

        savedItem.setForms(Collections.emptyList());

        assertThat(imrtItem).isEqualTo(imrtItemRepository.save((ImrtItem) savedItem));

        final BaseItem anotherItem = baseItemRepository.findById(imrtItem.getId());

        assertThat(anotherItem.getForms()).isEmpty();
    }

    @Test
    public void shouldGetValidationErrors() {
        final ImrtItem imrtItem = ImrtItemBuilder.builder()
                .build();

        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        BaseItem savedItem = baseItemRepository.findById(imrtItem.getId());

        ValidationResult result = ValidationResultBuilder.builder()
                .withItem(savedItem)
                .build();

        savedItem.setValidationResults(Collections.singletonList(result));

        savedItem = baseItemRepository.findById(imrtItem.getId());

        assertThat(savedItem.getValidationResults()).hasSize(1);
    }
}