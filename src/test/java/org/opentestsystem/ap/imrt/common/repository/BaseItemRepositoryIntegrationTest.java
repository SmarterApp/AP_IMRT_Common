package org.opentestsystem.ap.imrt.common.repository;

import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.imrt.common.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.common.model.Attachment;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class BaseItemRepositoryIntegrationTest {
    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Autowired
    private BaseItemRepository baseItemRepository;

    @Test
    public void shouldFindById() {
        ImrtItem imrtItem = new ImrtItemBuilder()
                .withAssociatedStimulusId(123)
                .build();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(baseItemRepository.findById(imrtItem.getId()));
    }

    @Test
    public void shouldSaveAnItemThatHasAttachments() {
        final ImrtItem imrtItem = new ImrtItemBuilder()
                .withAslRequired("yes")
                .withAslProvided("yes")
                .withBrailleRequired("yes")
                .withBrailleProvided("yes")
                .withCcRequired("yes")
                .withCcProvided("yes")
                .build();

        final Attachment aslAttachment = new Attachment();
        aslAttachment.setFileName("asl-filename");
        aslAttachment.setFileType("asl");
        aslAttachment.setUpdatedBy("me");
        aslAttachment.setUploadedDate(Instant.now());
        aslAttachment.setItem(imrtItem);

        final Attachment brailleAttachment = new Attachment();
        brailleAttachment.setFileName("braille-filename");
        brailleAttachment.setFileType("braille");
        brailleAttachment.setUpdatedBy("me");
        brailleAttachment.setUploadedDate(Instant.now());
        brailleAttachment.setItem(imrtItem);

        final Attachment ccAttachment = new Attachment();
        ccAttachment.setFileName("cc-filename");
        ccAttachment.setFileType("cc");
        ccAttachment.setUpdatedBy("me");
        ccAttachment.setUploadedDate(Instant.now());
        ccAttachment.setItem(imrtItem);

        imrtItem.setAslAttachments(Collections.singletonList(aslAttachment));
        imrtItem.setBrailleAttachments(Collections.singletonList(brailleAttachment));
        imrtItem.setCcAttachments(Collections.singletonList(ccAttachment));

        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));

        final BaseItem savedItem = baseItemRepository.findById(imrtItem.getId());

        assertThat(savedItem).isNotNull();
        assertThat(savedItem.getAslAttachments()).hasSize(1);
        assertThat(savedItem.getAslAttachments().get(0).getFileType()).isEqualTo("asl");

        assertThat(savedItem.getBrailleAttachments()).hasSize(1);
        assertThat(savedItem.getBrailleAttachments().get(0).getFileType()).isEqualTo("braille");

        assertThat(savedItem.getCcAttachments()).hasSize(1);
        assertThat(savedItem.getCcAttachments().get(0).getFileType()).isEqualTo("cc");
    }
}