package org.opentestsystem.ap.imrt.common.repository;

import org.assertj.core.util.Lists;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.imrt.common.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class ImrtItemRepositoryIntegrationTest {

    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Test
    public void shouldCreateItem() {
        ImrtItem imrtItem = ImrtItemBuilder.builder().build();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(imrtItemRepository.findOne(imrtItem.getKey()));
    }

    @Test
    public void shouldCreateItemWithBlankFields() {
        ImrtItem imrtItem = imrtItemRepository.save(ImrtItemBuilder.builder().withDepthOfKnowledge("").build());
        assertThat(imrtItem.getDepthOfKnowledge()).isEqualTo("");
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(imrtItemRepository.findOne(imrtItem.getKey()));
    }

    @Test
    public void shouldFindById() {
        ImrtItem imrtItem = ImrtItemBuilder.builder().build();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(imrtItemRepository.findById(imrtItem.getId()));
    }

    @Test
    public void shouldNotFindById() {
        ImrtItem imrtItem = ImrtItemBuilder.builder().build();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItemRepository.findById(9999999)).isNull();

    }

    @Test
    public void shouldUpdateItem() {
        ImrtItem imrtItem = ImrtItemBuilder.builder().build();
        // Save the item to the DB
        imrtItemRepository.save(imrtItem);
        Instant originalUpdatedAt = imrtItem.getUpdatedAt();

        ImrtItem updatedItem = imrtItemRepository.findOne(imrtItem.getKey());
        updatedItem.setSubject("differentSubject");
        updatedItem.setItemType("differentType");
        updatedItem.setWorkflowStatusSetAt(Instant.now());
        updatedItem.setBeingCreated(!imrtItem.isBeingCreated());
        imrtItemRepository.save(updatedItem);

        // There should still be only one item in the DB after the update
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(1);
        // If we do a read, we should get back a new object with the updated fields
        // Updated at will be later, and the parsed Item object from the itemJson field will be different
        ImrtItem readItem = imrtItemRepository.findOne(imrtItem.getKey());
        assertThat(originalUpdatedAt).isBefore(readItem.getUpdatedAt());
        assertThat(updatedItem.getSubject()).isEqualTo(readItem.getSubject());
        assertThat(updatedItem.getItemType()).isEqualTo(readItem.getItemType());
        assertThat(updatedItem.getCreatedAt()).isEqualTo(readItem.getCreatedAt());
        assertThat(updatedItem.getGrade()).isEqualTo(readItem.getGrade());
        assertThat(updatedItem.getWorkflowStatusSetAt()).isEqualTo(readItem.getWorkflowStatusSetAt());
        assertThat(updatedItem.isBeingCreated()).isEqualTo(readItem.isBeingCreated());
    }

    @Test
    public void shouldDeleteItem() {
        ImrtItem imrtItem = ImrtItemBuilder.builder().build();
        // Save the item to the DB
        imrtItemRepository.save(imrtItem);
        // There should be one item in the DB after the save
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(1);
        imrtItemRepository.delete(imrtItem.getKey());
        // There should be no items in the DB after the delete
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(0);

    }

    @Test
    public void shouldNotFindByStimId() {
        ImrtItem imrtItem = ImrtItemBuilder.builder().build();
        // Save the item to the DB
        imrtItemRepository.save(imrtItem);

        assertThat(imrtItemRepository.findAllByAssociatedStimulusId(
                99999)).isEmpty();
    }

    @Test
    public void shouldFindByStimId() {
        ImrtItem item1 = ImrtItemBuilder.builder().withId(123).withAssociatedStimulusId(555).build();
        ImrtItem item2 = ImrtItemBuilder.builder().withId(345).withAssociatedStimulusId(333).build();
        ImrtItem item3 = ImrtItemBuilder.builder().withId(445).withAssociatedStimulusId(555).build();

        imrtItemRepository.save(Lists.newArrayList(item1, item2, item3));

        List<ImrtItem> result = imrtItemRepository.findAllByAssociatedStimulusId(555);
        assertThat(result.size()).isEqualTo(2);
        assertThat(result).contains(item1, item3);
    }

    @Test
    public void shouldSaveTutorialItem() {
        TutItem tut = new TutItem("123");
        ImrtItem item = ImrtItemBuilder.builder().withItemJson(tut).build();
        imrtItemRepository.save(item);
    }
}